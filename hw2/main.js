
const arr =
[5, 7,
[4, [2], 8, [1,3], 2],
[9, [] ],
1, 8];

console.log(arr);

const treeSum = (arr) => {
  let sum = 0;
  //основное тело цикла
  for (let i = 0; i < arr.length; i++) {
    switch (typeof arr[i]) {
      case 'number' : {
        sum += arr[i];
        break;
      }
      //массив внутри js определяется как тип "Объект"
      case 'object' : {
        sum += treeSum(arr[i]);
        break;
      }
      default: {
        console.log("Error");
        return -1;
      }
    }
  }
  return sum;
}

console.log(treeSum(arr));
console.log("______");

//Проверка алгоритма
//Для этого написал рекурсивную функцию, которая будет создавать похожие массивы.
//Она находится в файле special_functions.js, который в дальнейшем будет подкидываться если понадобятся какие-то функции.

const arr_generator = (size = 7, level = 0) => {
  //Размер массива первого уровня задается вручную в функции. По умолчанию это 7.
  //На первом уровне, с вероятностью 75% будет сгенерировано случайное число от 0 до 9. С вероятностью 25% это будет массив.
  //Случайность задается непрерывным распределением в пределах (0,1) =>
  //      => если попадется число в пределах (0, 0.75) то будет число
  //      => если попадется число в пределах (0.75, 1) то будет массив
  //С каждым следующим уровнем, шанс "числа" увеличивается на 5%, шанс "массива" уменьшается на 5%.
  //С каждым следующим уровнем, максимальный размер уменьшается на 1.
  // Уровень | Шанс создания массива
  //    1    |           30%
  //    2    |           25%
  //    3    |           20%
  //    4    |           15%
  //    5    |           10%
  //    6    |           5%

  let arr = [];
  const chance = 0.65 + level * 0.5;
    for (let i = 0; i < size; i++) {
      if (Math.random() < chance) {
        arr.push(Math.floor(Math.random() * 10));
      }
      if (Math.random() > chance) {
        arr.push(arr_generator(size - 1, level + 1));
      }
    }

    return arr;
  }

const arr2 = arr_generator();
console.log(arr2);
console.log("______");
console.log(treeSum(arr2));
